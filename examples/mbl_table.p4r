// A simple example of mbl table manipulations

#include <tofino/intrinsic_metadata.p4>
#include <tofino/constants.p4>
#include <tofino/stateful_alu_blackbox.p4>
#include <tofino/primitives.p4>

/*================================
=      header      =
================================*/
header_type ethernet_t {
  fields {
    dstAddr :48;
    srcAddr : 48;
    etherType : 16;
  }
}

header_type ipv4_t {
  fields {
    version : 4;
    ihl : 4;
    diffserv : 8;
    totalLen : 16;
    identification : 16;
    flags : 3;
    fragOffset : 13;
    ttl : 8;
    protocol : 8;
    hdrChecksum : 16;
    srcAddr : 32;
    dstAddr : 32;
  }
}

header_type udp_t {
  fields {
    srcPort : 16;
    dstPort : 16;
    hdr_length : 16;
    checksum : 16;
  }
}

header ethernet_t ethernet;
header ipv4_t ipv4;
header udp_t udp;

/*================================
=      parser       =
================================*/

#define UDP_TYPE 17

parser start {
  return parse_ethernet;
}

parser parse_ethernet {
  extract(ethernet);
  return select(latest.etherType) {
    0x800 : parse_ipv4;
  }
}

parser parse_ipv4 {
  extract(ipv4);
  return select(latest.fragOffset, latest.protocol) {
    UDP_TYPE : parse_udp;
    default: ingress;
  }
}

parser parse_udp {
  extract(udp);
  return ingress;
}

/*================================
=      ingress      =
================================*/
action ai_nop() {
}

action ai_set_egr_port(egress_port) {
  modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_port);
}

action ai_drop_ipv4() {
  drop();
}

malleable table ti_var_table {
  reads {
    ipv4.dstAddr : ternary;
  }
  actions {
    ai_nop;
    ai_set_egr_port;
  }
  size : 512;
}

control ingress {
  apply(ti_var_table);
}

/*================================
=      egress      =
================================*/
control egress {
}

/*================================
=   P4R reaction   =
================================*/
init_block global_init {
  // Same syntax as if non-mbl table, Mantis handles the isolation underneath
  ti_var_table_add_ai_set_egr_port(0, 0xa01010d, 0xffffffff, 0x1, 0x90);
  ti_var_table_add_ai_set_egr_port(1, 0xa01010d, 0xffffffff, 0x1, 0x90);
} 

reaction my_reaction() {

  static bool flip = true;

  if (flip) {
    ti_var_table_mod_ai_set_egr_port(1, 0x89);
    flip = false;
  } else {
    ti_var_table_mod_ai_set_egr_port(1, 0x90);
    flip = true;
  }
}

/*=====  End of P4R code  ======*/
