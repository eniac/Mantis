// A simple example showing the malleable value/field modification syntax

#include <tofino/intrinsic_metadata.p4>
#include <tofino/constants.p4>
#include <tofino/stateful_alu_blackbox.p4>
#include <tofino/primitives.p4>

/*===============================
=      Headers      =
===============================*/

header_type my_header_t {
  fields {
    foo : 8;
    bar : 8;
    baz : 32;
  }
}
header my_header_t hdr;


/*=====  End of Headers  ======*/

/*==============================
=      Parser      =
==============================*/

parser start {
  return parse_header;
}
parser parse_header {
  extract(hdr);
  return ingress;
}


/*=====  End of Parser  ======*/


/*======================================================
=      P4 ingress, tables, and action      =
======================================================*/

control ingress {
  apply(table_var);
}

/*=====  End of P4 ingress, tables, and action  ======*/


/*================================
=      P4R code      =
================================*/

malleable value value_var {
  width : 15;
  init : 1;
}

malleable field field_var {
  width : 32;
  init : hdr.foo;
  alts { hdr.foo, hdr.bar }
}

malleable table table_var {
  reads { ${field_var} : exact; }
  actions { my_action; drop; }
}

action my_action() {
  add(${field_var}, hdr.baz, ${value_var});
}

action drop() {
}

control egress {
}

reaction my_reaction() {
  static bool flip = true;
  if (flip) {
    ${value_var} = 1 ;
    ${field_var} = hdr.foo;
    flip = false;
  } else {
    ${value_var}= 0;
    ${field_var} =hdr.bar;
    flip = true;
  }  
}

/*=====  End of P4R code  ======*/